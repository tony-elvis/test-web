include:
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml

stages:
  - test
  - version-change
  - build-deploy

variables:
  BASE_IMAGE: $AWS_ECR_BASE_URI-$CI_COMMIT_BRANCH
  TAG_COMMIT: $BASE_IMAGE:$CI_COMMIT_SHORT_SHA
  TAG_LATEST: $BASE_IMAGE:latest

.upload-to-ecr:
  image: docker:20.10.17
  services:
    - docker:dind
  before_script:
    - apk add --no-cache python3 py-pip curl bash
    - pip install awscli
    - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $BASE_IMAGE
  script:
    # Update version
    - cp "$VERSION_SCRIPT" version.sh && chmod u+x version.sh
    - WEBADMIN_VERSION=$(bash version.sh | tail -n 1)

    # Build and push image to ECR
    - TAG_VERSION=$BASE_IMAGE:$WEBADMIN_VERSION
    - docker build -t $TAG_COMMIT -t $TAG_LATEST -t $TAG_VERSION --build-arg REACT_APP_BACKEND_URL=$REACT_APP_BACKEND_URL --build-arg REACT_APP_MAPBOX_PUBLIC_KEY=$REACT_APP_MAPBOX_PUBLIC_KEY .
    - docker push $TAG_COMMIT
    - docker push $TAG_LATEST
    - docker push $TAG_VERSION
  after_script:
    - rm /root/.docker/config.json

deploy-to-dev:
  stage: build-deploy
  environment: development
  extends: .upload-to-ecr
  variables:
    VERSION_INC: 1
  rules:
    - if: $CI_COMMIT_BRANCH == "develop" && $CI_PROJECT_ID == '42436276'

deploy-to-qa:
  stage: build-deploy
  environment: qa
  extends: .upload-to-ecr
  variables:
    VERSION_INC: 1
  rules:
    - if: $CI_COMMIT_BRANCH == "qa" && $CI_PROJECT_ID == '42436276'

deploy-to-prod:
  stage: build-deploy
  environment: production
  extends: .upload-to-ecr
  variables:
    BASE_IMAGE: $AWS_ECR_BASE_URI-main
  rules:
    - if: $CI_COMMIT_BRANCH == "master" && $CI_PROJECT_ID == '42436276'